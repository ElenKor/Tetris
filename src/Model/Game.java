package Model;

import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;

import Model.Tetrominos.GamePiece;

//Методы для игры в Тетрис

public interface Game {
  //Поворачивает текущую деталь вправо по часовой стрелке на 90 градусов.
  void rotateRight();
  int getScore();
  /**
  Возвращает 2D-цветовой массив доски - текущее состояние игры, представленное в виде массива цветов, где черный - это пустое пространство,
   а все остальные - это игровые фигуры, прикрепленные к доске.
   */

  Color[][] getGameState();
   //Возвращает текущую сохраненную игровую фигуру.
  GamePiece getSavedPiece();

  /**
   Переключает текущую фигуру на сохраненную. Если сохраненная фигура равна нулю,
   то это означает, что ни одна фигура ранее не была сохранена, тогда сохранная фигура = текущая,
   а текущая фигура = новая случайная игровая фигура.
   */
  void save();

  /**
   Перемещает текущее положение игрового поля по горизонтали с учетом значения {@code dir}. Если {@code dir}
   верно, тогда фигура пытается двигаться вправо и влево в противном случае
   */
  void moveX(boolean dir);
  //Перемещает позицию текущей игровой фигуры вниз на 1.
  void softDrop();
  //Перемещает положение текущей фигуры вниз до тех пор, пока она не достигнет столкновения с другой фигурой или нижней часть доски.
  void hardDrop();

  //Возвращает состояние окончания игры, где значение true означает, что игра завершена
  boolean getIsGameOver() ;
  //Очищает текущую сессию игры в Тетрис, сбрасывая доску, игровые фигуры и счет.
  void clear();
  // Возвращает количество линий, удаленных с доски.
  int getLinesRemoved();
  //Устанавливает состояние окончания игры в заданное состояние
  void setGameOver(boolean b);
  String info();
  void addScoreToFile(int score,String name) throws IOException;
  ArrayList<String> getScoreFile() throws IOException;
   void setName(String name);
   String getName();

}
